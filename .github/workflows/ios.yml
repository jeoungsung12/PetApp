name: iOS CD (Release Branch)
on:
  push:
    branches: [ "release" ]
jobs:
  deploy-to-testflight:
    name: Build and Deploy to TestFlight
    runs-on: macos-14
    timeout-minutes: 60 # 빌드 타임아웃 증가
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.2'
    
    # 시스템 정보 확인
    - name: Check System Info
      run: |
        echo "macOS Version:"
        sw_vers
        echo "Xcode Version:"
        xcodebuild -version
        echo "Free Disk Space:"
        df -h
        echo "Current Directory:"
        pwd
    
    # 프로젝트 파일 구조 확인
    - name: Check Project Structure
      run: |
        echo "Project Files:"
        ls -la
        echo "Xcode Project Info:"
        xcodebuild -project PetApp.xcodeproj -list
    
    # Apple 개발자 계정 로그인 설정
    - name: Setup Authentication
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        # Keychain 생성
        KEYCHAIN_PATH=$RUNNER_TEMP/login.keychain-db
        KEYCHAIN_PASSWORD=$(openssl rand -base64 12)
        
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security default-keychain -s $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        
        # Apple 개발자 계정 로그인 설정
        xcrun notarytool store-credentials "AC_PASSWORD" \
          --apple-id "$APPLE_ID" \
          --team-id "$APPLE_TEAM_ID" \
          --password "$APPLE_APP_SPECIFIC_PASSWORD"
        
        echo "Authentication setup completed"
    
    # App Store Connect API 키 설정
    - name: Setup App Store Connect API Key
      env:
        APP_STORE_CONNECT_API_KEY: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
        APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APPSTORE_API_KEY_ID }}
        APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}
      run: |
        mkdir -p ~/.appstoreconnect/private_keys
        echo -n "$APP_STORE_CONNECT_API_KEY" > ~/.appstoreconnect/private_keys/AuthKey_$APP_STORE_CONNECT_API_KEY_ID.p8
        echo "App Store Connect API Key setup completed"
    
    # 단계적 접근: 우선 CleanBuild 먼저 실행 - 코드 서명 충돌 해결
    - name: Clean Build
      env:
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        echo "Starting clean build process..."
        
        xcodebuild clean \
        -project PetApp.xcodeproj \
        -scheme "PetApp" \
        -configuration Release \
        DEVELOPMENT_TEAM="${APPLE_TEAM_ID}" \
        | xcpretty
        
        echo "Clean build completed"
    
    # 빌드 실행 (아카이브 전) - 코드 서명 충돌 해결
    - name: Build Project
      env:
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        echo "Starting build process..."
        
        xcodebuild build \
        -project PetApp.xcodeproj \
        -scheme "PetApp" \
        -configuration Release \
        -destination "generic/platform=iOS" \
        -skipPackagePluginValidation \
        -skipMacroValidation \
        DEVELOPMENT_TEAM="${APPLE_TEAM_ID}" \
        | tee buildlog.txt || { echo "Build failed. See log below:"; cat buildlog.txt; exit 1; }
        
        echo "Build completed successfully!"
    
    # 아카이브 생성 - 코드 서명 충돌 해결
    - name: Archive App
      env:
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        echo "Starting archive process..."
        
        mkdir -p build
        
        xcodebuild archive \
        -project PetApp.xcodeproj \
        -scheme "PetApp" \
        -archivePath build/app.xcarchive \
        -destination "generic/platform=iOS" \
        -configuration Release \
        -skipPackagePluginValidation \
        -skipMacroValidation \
        -allowProvisioningUpdates \
        -allowProvisioningDeviceRegistration \
        DEVELOPMENT_TEAM="${APPLE_TEAM_ID}" \
        | tee archivelog.txt || { echo "Archive failed. See log below:"; cat archivelog.txt; exit 1; }
        
        # 아카이브 생성 확인
        if [ ! -d "build/app.xcarchive" ]; then
          echo "Archive failed to create."
          echo "Current directory content:"
          ls -la
          echo "Build directory content (if exists):"
          if [ -d "build" ]; then
            ls -la build
          fi
          exit 1
        fi
        
        echo "Archive completed successfully!"
        echo "Archive content:"
        ls -la build/app.xcarchive
    
    # ExportOptions.plist 생성
    - name: Create Export Options Plist
      env:
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        cat > ExportOptions.plist << EOL
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>app-store</string>
            <key>signingStyle</key>
            <string>automatic</string>
            <key>teamID</key>
            <string>${APPLE_TEAM_ID}</string>
            <key>uploadBitcode</key>
            <false/>
            <key>uploadSymbols</key>
            <true/>
            <key>compileBitcode</key>
            <false/>
            <key>destination</key>
            <string>upload</string>
            <key>stripSwiftSymbols</key>
            <true/>
            <key>iCloudContainerEnvironment</key>
            <string>Production</string>
        </dict>
        </plist>
        EOL
        
        echo "ExportOptions.plist content:"
        cat ExportOptions.plist
    
    # IPA 생성
    - name: Create IPA
      run: |
        mkdir -p "$GITHUB_WORKSPACE/output"
        
        xcodebuild -exportArchive \
        -archivePath "$GITHUB_WORKSPACE/build/app.xcarchive" \
        -exportOptionsPlist "$GITHUB_WORKSPACE/ExportOptions.plist" \
        -exportPath "$GITHUB_WORKSPACE/output" \
        -allowProvisioningUpdates \
        | tee exportlog.txt || { echo "Export failed. See log below:"; cat exportlog.txt; exit 1; }
        
        # IPA 파일 확인
        echo "Output directory content:"
        ls -la "$GITHUB_WORKSPACE/output"
        
        if ! ls "$GITHUB_WORKSPACE/output/"*.ipa 1> /dev/null 2>&1; then
          echo "IPA file creation failed."
          exit 1
        fi
        
        echo "IPA created successfully!"
    
    # TestFlight에 업로드
    - name: Upload to TestFlight
      uses: apple-actions/upload-testflight-build@v1
      with:
        app-path: ${{ github.workspace }}/output/*.ipa
        issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
        api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
        api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
