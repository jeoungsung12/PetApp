name: iOS CD (Release Branch)
on:
  push:
    branches: [ "release" ]
jobs:
  deploy-to-testflight:
    name: Build and Deploy to TestFlight
    runs-on: macos-14
    timeout-minutes: 60 # 빌드 타임아웃 증가
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.2'
    
    # 시스템 정보 확인
    - name: Check System Info
      run: |
        echo "macOS Version:"
        sw_vers
        echo "Xcode Version:"
        xcodebuild -version
        echo "Free Disk Space:"
        df -h
        echo "Current Directory:"
        pwd
    
    # 프로젝트 파일 구조 확인
    - name: Check Project Structure
      run: |
        echo "Project Files:"
        ls -la
        echo "Xcode Project Info:"
        xcodebuild -project PetApp.xcodeproj -list
    
    # 인증서 및 프로비저닝 프로파일 설정 (수동 서명)
    - name: Install the Apple certificate and provisioning profile
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        MAIN_PROVISIONING_PROFILE_BASE64: ${{ secrets.MAIN_PROVISIONING_PROFILE_BASE64 }}
        WIDGET_PROVISIONING_PROFILE_BASE64: ${{ secrets.WIDGET_PROVISIONING_PROFILE_BASE64 }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        # Keychain 생성
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
        KEYCHAIN_PASSWORD=$(openssl rand -base64 12)
        
        # 인증서 및 프로비저닝 프로파일 파일 경로
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        MAIN_PROFILE_PATH=$RUNNER_TEMP/main_profile.mobileprovision
        WIDGET_PROFILE_PATH=$RUNNER_TEMP/widget_profile.mobileprovision
        
        # 키체인 생성 및 설정
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security default-keychain -s $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        
        # base64 인코딩된 인증서 및 프로비저닝 프로파일 디코딩
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
        echo -n "$MAIN_PROVISIONING_PROFILE_BASE64" | base64 --decode --output $MAIN_PROFILE_PATH
        echo -n "$WIDGET_PROVISIONING_PROFILE_BASE64" | base64 --decode --output $WIDGET_PROFILE_PATH
        
        # 인증서 가져오기
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH
        
        # 프로비저닝 프로파일 설치
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        
        # 이름을 UUID로 저장
        MAIN_PROFILE_UUID=$(security cms -D -i $MAIN_PROFILE_PATH | grep -A1 UUID | grep string | cut -d'>' -f2 | cut -d'<' -f1)
        WIDGET_PROFILE_UUID=$(security cms -D -i $WIDGET_PROFILE_PATH | grep -A1 UUID | grep string | cut -d'>' -f2 | cut -d'<' -f1)
        
        # 프로비저닝 프로파일 파일 복사
        cp $MAIN_PROFILE_PATH ~/Library/MobileDevice/Provisioning\ Profiles/$MAIN_PROFILE_UUID.mobileprovision
        cp $WIDGET_PROFILE_PATH ~/Library/MobileDevice/Provisioning\ Profiles/$WIDGET_PROFILE_UUID.mobileprovision
        
        # UUID 출력 (디버깅용)
        echo "Main Provisioning Profile UUID: $MAIN_PROFILE_UUID"
        echo "Widget Provisioning Profile UUID: $WIDGET_PROFILE_UUID"
        
        # 환경 변수로 저장
        echo "MAIN_PROFILE_UUID=$MAIN_PROFILE_UUID" >> $GITHUB_ENV
        echo "WIDGET_PROFILE_UUID=$WIDGET_PROFILE_UUID" >> $GITHUB_ENV
    
    # App Store Connect API 키 설정
    - name: Setup App Store Connect API Key
      env:
        APPSTORE_API_PRIVATE_KEY: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
        APPSTORE_API_KEY_ID: ${{ secrets.APPSTORE_API_KEY_ID }}
        APPSTORE_ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}
      run: |
        mkdir -p ~/.appstoreconnect/private_keys
        echo -n "$APPSTORE_API_PRIVATE_KEY" > ~/.appstoreconnect/private_keys/AuthKey_$APPSTORE_API_KEY_ID.p8
        echo "App Store Connect API Key setup completed"
    
    # 디버깅: 프로비저닝 프로파일 및 인증서 확인
    - name: Debug Provisioning Profiles and Certificates
      run: |
        echo "Installed Provisioning Profiles:"
        ls -la ~/Library/MobileDevice/Provisioning\ Profiles
        
        echo "\nCode Signing Identities:"
        security find-identity -p codesigning
    
    # 프로젝트 파일 수정 (서명 설정)
    - name: Update project settings
      env:
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        MAIN_BUNDLE_ID: ${{ secrets.MAIN_BUNDLE_ID }}
        WIDGET_BUNDLE_ID: ${{ secrets.WIDGET_BUNDLE_ID }}
      run: |
        # 프로젝트 파일 수정 스크립트
        cat > update_project.rb << 'EOL'
        require 'xcodeproj'
        
        project_path = 'PetApp.xcodeproj'
        project = Xcodeproj::Project.open(project_path)
        
        main_bundle_id = ENV['MAIN_BUNDLE_ID'] || 'WEDLE.Warala'
        widget_bundle_id = ENV['WIDGET_BUNDLE_ID'] || 'WEDLE.Warala.PetAppWidget'
        
        # 메인 앱 타겟
        main_target = project.targets.find { |t| t.name == 'PetApp' }
        # 위젯 타겟
        widget_target = project.targets.find { |t| t.name == 'PetAppWidgetExtension' }
        
        # 타겟별 빌드 설정 업데이트
        [main_target, widget_target].each do |target|
          target.build_configurations.each do |config|
            if config.name == 'Release'
              config.build_settings['CODE_SIGN_STYLE'] = 'Manual'
              config.build_settings['DEVELOPMENT_TEAM'] = ENV['APPLE_TEAM_ID']
              config.build_settings['CODE_SIGN_IDENTITY'] = 'Apple Distribution'
              config.build_settings['CODE_SIGN_ALLOW_ENTITLEMENTS_MODIFICATION'] = 'YES'
              config.build_settings['ENABLE_BITCODE'] = 'NO'
              
              if target.name == 'PetApp'
                config.build_settings['PRODUCT_BUNDLE_IDENTIFIER'] = main_bundle_id
                config.build_settings['PROVISIONING_PROFILE_SPECIFIER'] = 'Warala_AppStore'
              elsif target.name == 'PetAppWidgetExtension'
                config.build_settings['PRODUCT_BUNDLE_IDENTIFIER'] = widget_bundle_id
                config.build_settings['PROVISIONING_PROFILE_SPECIFIER'] = 'WaralaWidget_AppStore'
              end
            end
          end
        end
        
        # 저장
        project.save
        EOL
        
        # Ruby 스크립트 실행
        sudo gem install xcodeproj
        ruby update_project.rb
    
    # 아카이브 생성 (프로젝트 파일 변경 적용)
    - name: Archive App
      env:
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        # 코드 사이닝 플래그 설정 (프로비저닝 프로파일 적용 없이)
        xcodebuild archive \
          -project PetApp.xcodeproj \
          -scheme "PetApp" \
          -archivePath build/PetApp.xcarchive \
          -destination "generic/platform=iOS" \
          -configuration Release \
          -skipPackagePluginValidation \
          -skipMacroValidation \
          -allowProvisioningUpdates \
          | tee archivelog.txt
        
        # 아카이브 생성 확인
        if [ ! -d "build/PetApp.xcarchive" ]; then
          echo "Archive failed to create."
          echo "Current directory content:"
          ls -la
          echo "Build directory content (if exists):"
          if [ -d "build" ]; then
            ls -la build
          fi
          exit 1
        fi
        
        echo "Archive completed successfully!"
        echo "Archive content:"
        ls -la build/PetApp.xcarchive
    
    # ExportOptions.plist 생성 (수동 서명용 - 로컬 내보내기만 수행)
    - name: Create Export Options Plist
      env:
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        MAIN_BUNDLE_ID: ${{ secrets.MAIN_BUNDLE_ID }}
        WIDGET_BUNDLE_ID: ${{ secrets.WIDGET_BUNDLE_ID }}
      run: |
        MAIN_BUNDLE_ID=${MAIN_BUNDLE_ID:-"WEDLE.Warala"}
        WIDGET_BUNDLE_ID=${WIDGET_BUNDLE_ID:-"WEDLE.Warala.PetAppWidget"}
        
        cat > ExportOptions.plist << EOL
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>app-store</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>teamID</key>
            <string>${APPLE_TEAM_ID}</string>
            <key>provisioningProfiles</key>
            <dict>
                <key>${MAIN_BUNDLE_ID}</key>
                <string>${MAIN_PROFILE_UUID}</string>
                <key>${WIDGET_BUNDLE_ID}</key>
                <string>${WIDGET_PROFILE_UUID}</string>
            </dict>
            <key>signingCertificate</key>
            <string>Apple Distribution</string>
            <key>compileBitcode</key>
            <false/>
            <key>uploadBitcode</key>
            <false/>
            <key>stripSwiftSymbols</key>
            <true/>
        </dict>
        </plist>
        EOL
        
        echo "ExportOptions.plist content:"
        cat ExportOptions.plist
    
    # IPA 생성 (로컬 내보내기만 수행)
    - name: Create IPA
      run: |
        mkdir -p "$GITHUB_WORKSPACE/output"
        
        xcodebuild -exportArchive \
        -archivePath "$GITHUB_WORKSPACE/build/PetApp.xcarchive" \
        -exportOptionsPlist "$GITHUB_WORKSPACE/ExportOptions.plist" \
        -exportPath "$GITHUB_WORKSPACE/output" \
        | tee exportlog.txt || { echo "Export failed. See log below:"; cat exportlog.txt; exit 1; }
        
        # IPA 파일 확인
        echo "Output directory content:"
        ls -la "$GITHUB_WORKSPACE/output"
        
        if ! ls "$GITHUB_WORKSPACE/output/"*.ipa 1> /dev/null 2>&1; then
          echo "IPA file creation failed."
          exit 1
        fi
        
        echo "IPA created successfully!"
