name: iOS CD (Release Branch)
on:
  push:
    branches: [ "release" ]
jobs:
  deploy-to-testflight:
    name: Build and Deploy to TestFlight
    runs-on: macos-14
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'
      
      # Swift 패키지 캐싱
      - name: Cache Swift packages
        uses: actions/cache@v3
        with:
          path: .build
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-
      
      # Apple Keychain 설정
      - name: Install Apple Certificate
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # 임시 키체인 생성
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # 키체인을 검색 리스트에 추가
          security list-keychains -d user -s $KEYCHAIN_PATH $(security list-keychains -d user | sed s/\"//g)
          security default-keychain -s $KEYCHAIN_PATH
          
          # 인증서 설치
          echo $BUILD_CERTIFICATE_BASE64 | base64 --decode > $RUNNER_TEMP/build_certificate.p12
          security import $RUNNER_TEMP/build_certificate.p12 -k $KEYCHAIN_PATH -P "$P12_PASSWORD" -A
          
          # 파티션 리스트 설정
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # 임시 파일 삭제
          rm $RUNNER_TEMP/build_certificate.p12
      
      # 프로비저닝 프로파일 설정
      - name: Install Provisioning Profile
        env:
          PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
          WIDGET_PROVISIONING_PROFILE_BASE64: ${{ secrets.WIDGET_PROVISIONING_PROFILE_BASE64 }}
        run: |
          # 프로비저닝 프로파일 디렉토리 생성
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          
          # 앱 프로비저닝 프로파일 설치
          echo "$PROVISIONING_PROFILE_BASE64" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
          
          # 위젯 프로비저닝 프로파일 설치 (있는 경우)
          if [ ! -z "$WIDGET_PROVISIONING_PROFILE_BASE64" ]; then
            echo "$WIDGET_PROVISIONING_PROFILE_BASE64" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/widget_profile.mobileprovision
          fi
      
      # App Store Connect API 키 설정
      - name: Setup App Store Connect API Key
        env:
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APPSTORE_API_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}
        run: |
          mkdir -p ~/.appstoreconnect/private_keys
          echo -n "$APP_STORE_CONNECT_API_KEY" > ~/.appstoreconnect/private_keys/AuthKey_$APP_STORE_CONNECT_API_KEY_ID.p8
          
      # 앱 빌드 및 아카이브 (수동 서명 사용)
      - name: Build and Archive App
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          BUNDLE_IDENTIFIER: ${{ secrets.BUNDLE_IDENTIFIER }}
          PROVISIONING_PROFILE_SPECIFIER: ${{ secrets.PROVISIONING_PROFILE_SPECIFIER }}
          WIDGET_BUNDLE_IDENTIFIER: ${{ secrets.WIDGET_BUNDLE_IDENTIFIER }}
          WIDGET_PROVISIONING_PROFILE_SPECIFIER: ${{ secrets.WIDGET_PROVISIONING_PROFILE_SPECIFIER }}
        run: |
          xcodebuild archive \
            -project *.xcodeproj \
            -scheme "PetApp" \
            -archivePath build/app.xcarchive \
            -destination "generic/platform=iOS" \
            -configuration Release \
            DEVELOPMENT_TEAM=$APPLE_TEAM_ID \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            CODE_SIGN_STYLE=Manual \
            PROVISIONING_PROFILE_SPECIFIER="$PROVISIONING_PROFILE_SPECIFIER" \
            "OTHER_CODE_SIGN_FLAGS=--keychain $RUNNER_TEMP/app-signing.keychain-db"
      
      # ExportOptions.plist 생성 (수동 서명용)
      - name: Create Export Options Plist
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          PROVISIONING_PROFILE_SPECIFIER: ${{ secrets.PROVISIONING_PROFILE_SPECIFIER }}
          BUNDLE_IDENTIFIER: ${{ secrets.BUNDLE_IDENTIFIER }}
          WIDGET_BUNDLE_IDENTIFIER: ${{ secrets.WIDGET_BUNDLE_IDENTIFIER }}
          WIDGET_PROVISIONING_PROFILE_SPECIFIER: ${{ secrets.WIDGET_PROVISIONING_PROFILE_SPECIFIER }}
        run: |
          cat > ExportOptions.plist << EOL
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>teamID</key>
              <string>${APPLE_TEAM_ID}</string>
              <key>signingStyle</key>
              <string>manual</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>${BUNDLE_IDENTIFIER}</key>
                  <string>${PROVISIONING_PROFILE_SPECIFIER}</string>
          EOL
          
          # 위젯이 있는 경우 위젯 프로비저닝 프로파일 추가
          if [ ! -z "$WIDGET_BUNDLE_IDENTIFIER" ] && [ ! -z "$WIDGET_PROVISIONING_PROFILE_SPECIFIER" ]; then
            cat >> ExportOptions.plist << EOL
                  <key>${WIDGET_BUNDLE_IDENTIFIER}</key>
                  <string>${WIDGET_PROVISIONING_PROFILE_SPECIFIER}</string>
          EOL
          fi
          
          # plist 파일 완성
          cat >> ExportOptions.plist << EOL
              </dict>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
          </dict>
          </plist>
          EOL
          
          cat ExportOptions.plist
      
      # IPA 생성 (수동 서명 사용)
      - name: Create IPA
        run: |
          xcodebuild -exportArchive \
            -archivePath build/app.xcarchive \
            -exportOptionsPlist ExportOptions.plist \
            -exportPath build \
            -allowProvisioningUpdates
      
      # TestFlight에 업로드
      - name: Upload to TestFlight
        uses: apple-actions/upload-testflight-build@v1
        with:
          app-path: build/*.ipa
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
